{"version":3,"sources":["images/mobil.svg","images/motor.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProductInfo","product","this","props","cardClass","ready","image","type","motor","mobil","className","src","nama","harga","React","Component","ProductTypeRow","ProductCards","filterText","readyOnly","cards","lastType","products","forEach","console","log","indexOf","push","key","FilterBar","handleTextFilter","e","onFilterTextChange","target","value","handleReadyChange","onReadyChange","checked","placeholder","onChange","FilterableProductCards","handleFilterTextChange","text","setState","state","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05fbaa6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mobil.fc7cb623.svg\";","module.exports = __webpack_public_path__ + \"static/media/motor.34b584ea.svg\";","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport mobil from './images/mobil.svg';\nimport motor from './images/motor.svg';\n\nclass ProductInfo extends React.Component{\n\n  render(){\n    const product = this.props.product;\n    const cardClass = product.ready?'ProductCard':'ProductCard kosong';\n    const image = product.type ==='Motor' ? motor : mobil;\n\n    return (\n      <div className={cardClass} >\n          <div className=\"inner\">\n            <img src={image}/>\n            <div className=\"ProductInfo\" >\n              <span>{product.nama}</span>\n              <span>{product.harga}</span>\n            </div>\n          </div>\n      </div>\n    )\n  }\n}\n\n\nclass ProductTypeRow extends React.Component{\n  render(){\n    const type = this.props.type;\n    return(\n    <div className=\"ProductCategory\">{type}</div>\n    )\n  }\n}\n\nclass ProductCards extends React.Component{\n\n  render(){\n\n    const filterText = this.props.filterText;\n    const readyOnly = this.props.readyOnly;\n\n    const cards = [];\n    let lastType = null;\n    \n    this.props.products.forEach(product => {\n      console.log(product.nama.indexOf(filterText));\n\n      if(product.nama.indexOf(filterText) === -1){\n        return;\n      }\n      if(readyOnly && !product.ready){\n        return;\n      }\n\n      if (product.type !==lastType){\n        cards.push(\n          <ProductTypeRow type={product.type} key={product.type} />\n        )\n      }\n      cards.push(\n        <ProductInfo product={product} key={product.nama}/>\n      )\n     lastType = product.type;\n\n    });\n    \n    return (\n      <div className=\"CardRow\">\n        {cards}\n      </div>\n    )\n  }\n}\n\nclass FilterBar extends React.Component{\n\n\n  handleTextFilter = e => this.props.onFilterTextChange(e.target.value);\n  handleReadyChange = e => this.props.onReadyChange(e.target.checked);\n\n  render(){\n   \n    return (\n      <form className=\"FilterForm\">\n        <input type=\"text\" placeholder=\"Search Here\" \n        value={this.props.filterText} \n        onChange={this.handleTextFilter}/>\n        <label>\n        <input\n            type=\"checkbox\"\n            checked={this.props.readyOnly}\n            onChange={this.handleReadyChange}\n          />\n        {' '} In stock Only</label>\n        <>\n       \n        </>\n      </form>\n    )\n  }\n}\n\n\n\nclass FilterableProductCards extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      filterText :'',\n      readyOnly : false,\n    }\n  }\n\n  handleFilterTextChange = text => this.setState({filterText: text});\n\n  handleReadyChange = ready => this.setState({readyOnly:ready});\n\n  render(){\n    return(\n      <>\n      <FilterBar  filterText={this.state.filterText} readyOnly={this.state.readyOnly}\n      onFilterTextChange={this.handleFilterTextChange}\n      onReadyChange={this.handleReadyChange}\n      />\n      <ProductCards products={this.props.products} filterText={this.state.filterText}\n      readyOnly={this.state.readyOnly}\n      />\n      </>\n    )\n  }\n}\n\nclass App extends React.Component{\n  \n  \n\n  render(){\n\n    const products =[\n      {type: \"Mobil\", harga: \"Rp 148.000.000\", ready: true, nama: \"Brio\"},\n      {type: \"Mobil\", harga: \"Rp 205.500.000\", ready: true, nama: \"Mobilio\"},\n      {type: \"Mobil\", harga: \"Rp 252.500.000\", ready: false, nama: \"Jazz\"},\n      {type: \"Motor\", harga: \"Rp 16.000.000\", ready: true, nama: \"Beat\"},\n      {type: \"Motor\", harga: \"Rp 29.000.000\", ready: false, nama: \"PCX\"},\n      {type: \"Motor\", harga: \"Rp 35.000.000\", ready: true, nama: \"CBR150R\"}\n    ];\n    return (\n      <div className=\"App\">\n          <FilterableProductCards products={products}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}